---
# yaml-language-server: $schema=https://raw.githubusercontent.com/authelia/authelia/refs/heads/master/docs/static/schemas/v4.39/json-schema/configuration.json
authentication_backend:
  ldap:
    implementation: custom
    start_tls: false
    address: ldap://lldap.security.svc.cluster.local:3890
    timeout: 5s
    base_dn: dc=zed,dc=gay
    users_filter: (&({username_attribute}={input})(objectClass=person))
    additional_groups_dn: ou=groups
    groups_filter: (member={dn})
    group_search_mode: filter
    attributes:
      username: uid
      display_name: displayName
      group_name: cn
      mail: mail
  password_reset:
    disable: true
  refresh_interval: 1m

definitions:
  user_attributes:
    is_nextcloud_admin:
      expression: '"nextcloud-admins" in groups'

access_control:
  default_policy: one_factor

identity_providers:
  oidc:
    claims_policies:
      karakeep:
        id_token:
          - email
      grafana:
        id_token: ['email', 'name', 'groups', 'preferred_username']
      nextcloud_userinfo:
        custom_claims:
          is_nextcloud_admin: {}
    scopes:
      nextcloud_userinfo:
        claims:
          - 'is_nextcloud_admin'
    clients:
      - client_id: '{{ env "MEALIE_CLIENT_ID" }}'
        client_secret: '{{ env "MEALIE_CLIENT_SECRET_DIGEST" }}'
        client_name: Mealie
        public: false
        scopes:
          - openid
          - profile
          - groups
          - email
        userinfo_signed_response_alg: none
        redirect_uris:
          - "https://mealie.${SECRET_DOMAIN}/login"
          - "https://mealie.${SECRET_DOMAIN}/login?direct=1"
      - client_id: '{{ env "HOARDER_CLIENT_ID" }}'
        client_secret: '{{ env "HOARDER_CLIENT_SECRET_DIGEST" }}'
        client_name: Hoarder
        claims_policy: karakeep
        public: false
        authorization_policy: 'two_factor'
        require_pkce: false
        pkce_challenge_method: S256
        redirect_uris:
          - 'https://hoarder.${SECRET_DOMAIN}/api/auth/callback/custom'
        scopes:
          - 'openid'
          - 'profile'
          - 'email'
        response_types:
          - 'code'
        grant_types:
          - 'authorization_code'
        access_token_signed_response_alg: 'none'
        userinfo_signed_response_alg: 'none'
        token_endpoint_auth_method: 'client_secret_basic'
      - client_id: '{{ env "KOMGA_CLIENT_ID" }}'
        client_name: 'Komga'
        client_secret: '{{ env "KOMGA_CLIENT_SECRET_DIGEST" }}'
        public: false
        authorization_policy: 'two_factor'
        redirect_uris:
          - 'https://komga.${SECRET_DOMAIN}/login/oauth2/code/authelia'
        scopes:
          - 'openid'
          - 'profile'
          - 'email'
        grant_types:
          - 'authorization_code'
        userinfo_signed_response_alg: 'none'
      - client_id: '{{ env "GRAFANA_CLIENT_ID" }}'
        client_secret: '{{ env "GRAFANA_CLIENT_SECRET_DIGEST" }}'
        claims_policy: 'grafana'
        client_name: 'Grafana'
        public: false
        authorization_policy: 'two_factor'
        require_pkce: true
        pkce_challenge_method: 'S256'
        redirect_uris:
          - 'https://grafana.${SECRET_DOMAIN}/login/generic_oauth'
        scopes:
          - 'openid'
          - 'profile'
          - 'groups'
          - 'email'
        userinfo_signed_response_alg: 'none'
        token_endpoint_auth_method: 'client_secret_post'
      - client_id: '{{ env "MINIFLUX_CLIENT_ID" }}'
        client_secret: '{{ env "MINIFLUX_CLIENT_SECRET_DIGEST" }}'
        public: false
        authorization_policy: 'two_factor'
        require_pkce: false
        pkce_challenge_method: ''
        redirect_uris:
          - 'https://miniflux.${SECRET_DOMAIN}/oauth2/oidc/callback'
        scopes:
          - 'openid'
          - 'profile'
          - 'email'
        response_types:
          - 'code'
        grant_types:
          - 'authorization_code'
        access_token_signed_response_alg: 'none'
        userinfo_signed_response_alg: 'none'
        token_endpoint_auth_method: 'client_secret_basic'
      - client_id: '{{ env "PAPERLESS_CLIENT_ID" }}'
        client_name: 'Paperless'
        client_secret:  '{{ env "PAPERLESS_CLIENT_SECRET_DIGEST" }}'
        public: false
        authorization_policy: 'two_factor'
        require_pkce: true
        pkce_challenge_method: 'S256'
        redirect_uris:
          - 'https://paperless.${SECRET_DOMAIN}/accounts/oidc/authelia/login/callback/'
        scopes:
          - 'openid'
          - 'profile'
          - 'email'
          - 'groups'
        response_types:
          - 'code'
        grant_types:
          - 'authorization_code'
        access_token_signed_response_alg: 'none'
        userinfo_signed_response_alg: 'none'
        token_endpoint_auth_method: 'client_secret_basic'
      - client_id: '{{ env "NEXTCLOUD_CLIENT_ID" }}'
        client_name: 'Nextcloud'
        client_secret: '{{ env "NEXTCLOUD_CLIENT_SECRET_DIGEST" }}' # The digest of 'insecure_secret'.
        public: false
        authorization_policy: 'two_factor'
        require_pkce: true
        pkce_challenge_method: 'S256'
        claims_policy: 'nextcloud_userinfo'
        redirect_uris:
          - 'https://cloud.${SECRET_DOMAIN}/apps/oidc_login/oidc'
        scopes:
          - 'openid'
          - 'profile'
          - 'email'
          - 'groups'
          - 'nextcloud_userinfo'
        response_types:
          - 'code'
        grant_types:
          - 'authorization_code'
        access_token_signed_response_alg: 'none'
        userinfo_signed_response_alg: 'none'
        token_endpoint_auth_method: 'client_secret_basic'
      - client_id: '{{ env "HASS_CLIENT_ID" }}'
        client_name: 'Home Assistant'
        client_secret: '{{ env "HASS_CLIENT_SECRET_DIGEST" }}'
        public: false
        require_pkce: true
        pkce_challenge_method: 'S256'
        redirect_uris:
          - 'https://ha.${SECRET_DOMAIN}/auth/oidc/callback'
        scopes:
          - 'openid'
          - 'profile'
          - 'groups'
        response_types:
          - 'code'
        grant_types:
          - 'authorization_code'
        access_token_signed_response_alg: 'none'
        userinfo_signed_response_alg: 'none'
        token_endpoint_auth_method: 'client_secret_post'
      - client_id: '{{ env "TANDOOR_CLIENT_ID" }}'
        client_name: 'Tandoor'
        client_secret: '{{ env "TANDOOR_CLIENT_SECRET_DIGEST" }}'
        public: false
        authorization_policy: 'two_factor'
        require_pkce: false
        pkce_challenge_method: ''
        redirect_uris:
          - 'https://tandoor.${SECRET_DOMAIN}/accounts/oidc/authelia/login/callback/'
        scopes:
          - 'openid'
          - 'profile'
          - 'email'
        response_types:
          - 'code'
        grant_types:
          - 'authorization_code'
        access_token_signed_response_alg: 'none'
        userinfo_signed_response_alg: 'none'
        token_endpoint_auth_method: 'client_secret_basic'
      - client_id: '{{ env "FORGEJO_CLIENT_ID" }}'
        client_name: 'Forgejo'
        client_secret: '{{ env "FORGEJO_CLIENT_SECRET_DIGEST" }}'
        public: false
        authorization_policy: 'two_factor'
        require_pkce: true
        pkce_challenge_method: 'S256'
        redirect_uris:
          - 'https://git.${SECRET_DOMAIN}/user/oauth2/Authelia/callback'
        scopes:
          - 'openid'
          - 'email'
          - 'profile'
          - 'groups'
        response_types:
          - 'code'
        grant_types:
          - 'authorization_code'
        access_token_signed_response_alg: 'none'
        userinfo_signed_response_alg: 'none'
        token_endpoint_auth_method: 'client_secret_basic'
      - client_name:  '{{ env "QUI_CLIENT_ID" }}'
        client_id: qui
        client_secret: '{{ env "QUI_CLIENT_SECRET_DIGEST" }}'
        public: false
        authorization_policy: two_factor
        require_pkce: false
        pkce_challenge_method: ""
        redirect_uris:
          - https://qui.${SECRET_DOMAIN}/api/auth/oidc/callback
        scopes: [openid, profile, groups, email]
        response_types: [code]
        grant_types: [authorization_code]
        access_token_signed_response_alg: none
        userinfo_signed_response_alg: none
        token_endpoint_auth_method: client_secret_basic
      - client_name:  '{{ env "MEMOS_CLIENT_ID" }}'
        client_id: memos
        client_secret: '{{ env "MEMOS_CLIENT_SECRET_DIGEST" }}'
        public: false
        require_pkce: false
        pkce_challenge_method: ""
        redirect_uris:
          - https://memos.${SECRET_DOMAIN}/auth/callback
        scopes: [openid, profile, email]
        response_types: [code]
        grant_types: [authorization_code]
        access_token_signed_response_alg: none
        userinfo_signed_response_alg: none
        token_endpoint_auth_method: client_secret_post
session:
  same_site: lax
  inactivity: 5m
  expiration: 6h
  remember_me: 1M
  cookies:
    - name: authelia_session
      domain: ${SECRET_DOMAIN}
      authelia_url: https://auth.${SECRET_DOMAIN}
      default_redirection_url: https://${SECRET_DOMAIN}
  redis:
    database_index: 2
    host: dragonfly.database.svc.cluster.local

notifier:
  disable_startup_check: true
  smtp:
    sender: "Authelia <authelia@${SECRET_DOMAIN}>"
    disable_require_tls: false
