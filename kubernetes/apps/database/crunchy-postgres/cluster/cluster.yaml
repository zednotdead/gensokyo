---
# yaml-language-server: $schema=https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/postgres-operator.crunchydata.com/postgrescluster_v1beta1.json
apiVersion: postgres-operator.crunchydata.com/v1beta1
kind: PostgresCluster
metadata:
  name: &name postgres
spec:
  postgresVersion: 16
  # image: ghcr.io/budimanjojo/cdpgvecto.rs:16@sha256:2a54142d7a2becd027025e95ac3e4542f7688621f3a63fe131a8fec6a65ccc49
  image: ghcr.io/zednotdead/cdpgvectorchord:16-0.3.0@sha256:99ffcbc9e887fa4a981f61ff68dcf59bf8bf611f688217ed5f8d0ba07a67eff1
  metadata:
    labels:
      crunchy-userinit.ramblurr.github.com/enabled: "true"
      crunchy-userinit.ramblurr.github.com/superuser: "postgres"
  service:
    type: LoadBalancer
    metadata:
      annotations:
        external-dns.alpha.kubernetes.io/hostname: postgres.${SECRET_DOMAIN}
  patroni: # turn on sync writes to at least 1 other replica
    dynamicConfiguration:
      bootstrap:
        initdb:
          - encoding=C
          - locale=C
      synchronous_mode: true
      postgresql:
        max_wal_size: 5GB
        synchronous_commit: "on"
        pg_hba:
          - hostnossl all all 10.244.0.0/16 md5 # Needed because dbman does not support SSL yet
          - hostnossl all all 10.42.0.0/16 md5
          - hostssl all all all md5
        parameters:
          shared_preload_libraries: "vchord.so"
  databaseInitSQL:
    name: immich-db-init-sql
    key: init.sql
  instances:
    - name: postgres
      metadata:
        labels:
          app.kubernetes.io/name: crunchy-postgres
      replicas: &replica 1
      dataVolumeClaimSpec:
        storageClassName: ceph-filesystem
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: 20Gi
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: "kubernetes.io/hostname"
          whenUnsatisfiable: "DoNotSchedule"
          labelSelector:
            matchLabels:
              postgres-operator.crunchydata.com/cluster: *name
              postgres-operator.crunchydata.com/data: postgres
  users:
    # Superuser
    - name: postgres
      databases:
        - postgres
      options: "SUPERUSER"
      password:
        type: AlphaNumeric
    # Applications
    - name: immich
      databases:
        - immich
      password: &password
        type: AlphaNumeric
    - name: authentik
      databases:
        - authentik
      password: *password
    # - name: grafana
    #   databases:
    #     - grafana
    #   password: *password
    - name: "gatus"
      databases: ["gatus"]
      password: *password
    - name: "mealie"
      databases: ["mealie"]
      password: *password
    - name: "autobrr"
      databases: ["autobrr"]
      password: *password
    - name: "lldap"
      databases: ["lldap"]
      password: *password
    - name: "affine"
      databases: ["affine"]
      password: *password
    - name: "nextcloud"
      databases: ["nextcloud"]
      password: *password
    - name: "authelia"
      databases: ["authelia"]
      password: *password
    - name: "linkwarden"
      databases: ["linkwarden"]
      password: *password
    - name: "minifluxuser"
      databases: ["miniflux"]
      password: *password
    - name: sonarr
      databases:
        - sonarr_main
        - sonarr_log
      password: *password
  backups:
    pgbackrest:
      restore:
        enabled: false
        repoName: repo1
      configuration: &backupConfig
        - secret:
            name: crunchy-pgo-secret
      global: &backupFlag
        compress-type: "bz2"
        compress-level: "9"
        # Minio
        repo1-block: "y"
        repo1-bundle: "y"
        repo1-path: /crunchy-pgo
        repo1-retention-full: "30" # days
        repo1-retention-full-type: "time"
        repo1-storage-verify-tls: "n"
        repo1-s3-uri-style: path
        log-level-console: info
        log-level-file: debug
      manual:
        repoName: repo1
        options:
          - --type=full
      metadata:
        labels:
          app.kubernetes.io/name: crunchy-postgres-backup
      repos:
        - name: repo1 # Minio
          s3: &minio
            bucket: "crunchy-postgres"
            endpoint: "${NAS_ADDRESS}:9000"
            region: "us-east-1"
          schedules:
            full: "0 1 * * 0" # Sunday at 01:00
            differential: "0 1 * * 1-6" # Mon-Sat at 01:00
            incremental: "0 2-23 * * *" # Every hour except 01:00
  dataSource:
    pgbackrest:
      stanza: "db"
      configuration: *backupConfig
      global: *backupFlag
      repo:
        name: "repo1"
        s3: *minio
  monitoring:
    pgmonitor:
      exporter:
        resources:
          requests:
            cpu: 10m
            memory: 64M
          limits:
            memory: 512M
  proxy:
    pgBouncer:
      port: 5432
      replicas: *replica
      metadata:
        labels:
          app.kubernetes.io/name: crunchy-postgres-pgbouncer
      config:
        global:
          pool_mode: "session" # pgBouncer is set to transaction for Authentik. Grafana requires session https://github.com/grafana/grafana/issues/74260#issuecomment-1702795311. Everything else is happy with transaction
          client_tls_sslmode: prefer
          max_client_conn: "500"
          default_pool_size: "100"
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: "kubernetes.io/hostname"
          whenUnsatisfiable: "DoNotSchedule"
          labelSelector:
            matchLabels:
              postgres-operator.crunchydata.com/cluster: *name
              postgres-operator.crunchydata.com/role: "pgbouncer"
